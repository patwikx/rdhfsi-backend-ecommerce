generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  Administrator
  Approver
  User
  PMD
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId   String
  tenantId String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Modified User model
model User {
  id            String                  @id @default(cuid())
  name          String?
  email         String?                 @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  twoFactore    TwoFactorConfirmation[]
  store         Store?                  @relation(fields: [storeId], references: [id]) // Optional relation to a store
  storeId       String? // Foreign key to reference the Store
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([storeId])
}

model Store {
  id         String      @id @default(uuid())
  name       String
  users      User[] // Multiple users can be associated with a single store
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  barCode    String      @unique
  itemDesc   String?
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id                         String      @id @default(uuid())
  storeId                    String
  store                      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems                 OrderItem[]
  isPaid                     Boolean     @default(false)
  orderStatus                Boolean     @default(false)
  clientName                 String      @default("")
  clientEmail                String      @default("")
  companyName                String      @default("")
  deliveryMethod             String      @default("")
  poNumber                   String      @default("")
  shippingFee                Float?
  totalAmountItemAndShipping Decimal?
  attachedPOUrl              String      @default("")
  selectedDate               String?     @default("")
  contactNumber              String      @default("")
  address                    String      @default("")
  storeRemarks               String?     @default("")
  storeAttachedUrl           String?     @default("")
  acctgRemarks               String?     @default("")
  acctgAttachedUrl           String?     @default("")
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt

  @@unique([id, storeId])
  @@index([storeId])
}

model OrderItem {
  id                         String  @id @default(uuid())
  orderId                    String
  order                      Order   @relation(fields: [orderId], references: [id])
  productId                  String
  product                    Product @relation(fields: [productId], references: [id])
  quantity                   String?
  totalItemAmount            Float?
  totalAmountItemAndShipping Float?

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
